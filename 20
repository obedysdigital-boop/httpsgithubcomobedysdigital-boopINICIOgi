import { useState, useRef } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import {
  File,
  ListFilter,
  MoreHorizontal,
  PlusCircle,
  Upload,
  Download,
  FileCheck,
  FileClock,
  FileX,
  Archive,
  FileText,
} from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Progress } from '@/components/ui/progress';
import { toast } from 'sonner';

const mockFiles = [
    { id: 1, originalName: 'nota_fiscal_01.pdf', newName: 'Outubro (26) - Comercio de Maquinas Pirabeiraba Ltda NF 000.040.482 Vlr 123,00 Venc. 13-11-2025.pdf', status: 'Finalizado' },
    { id: 2, originalName: 'servico_2025.pdf', newName: 'Outubro (26) - Comercio de Maquinas Pirabeiraba Ltda NFS 000040482 Vlr 120,00 Venc. 10-10-2025.pdf', status: 'Finalizado' },
    { id: 3, originalName: 'nf_sem_venc.pdf', newName: 'Aguardando processamento...', status: 'Pendente' },
    { id: 4, originalName: 'documento_invalido.pdf', newName: 'Falha ao ler o arquivo', status: 'Erro' },
];

export function RenomeadorPage() {
    const [files, setFiles] = useState(mockFiles);
    const [uploadProgress, setUploadProgress] = useState(0);
    const [isUploading, setIsUploading] = useState(false);
    const fileInputRef = useRef<HTMLInputElement>(null);

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFiles = event.target.files;
        if (selectedFiles && selectedFiles.length > 0) {
            toast.info(`${selectedFiles.length} arquivo(s) selecionado(s). Iniciando processamento...`);
            startUploadSimulation();
        }
    };

    const handleImportClick = () => {
        fileInputRef.current?.click();
    };
    
    const startUploadSimulation = () => {
        setIsUploading(true);
        setUploadProgress(0);
        
        const interval = setInterval(() => {
            setUploadProgress(prev => {
                if (prev >= 99) {
                    clearInterval(interval);
                    setIsUploading(false);
                    toast.success('Arquivos importados e processados com sucesso!');
                    return 100;
                }
                return prev + 10;
            });
        }, 200);
    };

    const StatusBadge = ({ status }: { status: string }) => {
        switch (status) {
            case 'Finalizado':
                return <span className="px-2 py-1 text-xs font-medium text-green-800 bg-green-100 rounded-full dark:bg-green-900 dark:text-green-300">Finalizado</span>;
            case 'Pendente':
                return <span className="px-2 py-1 text-xs font-medium text-yellow-800 bg-yellow-100 rounded-full dark:bg-yellow-900 dark:text-yellow-300">Pendente</span>;
            case 'Erro':
                return <span className="px-2 py-1 text-xs font-medium text-red-800 bg-red-100 rounded-full dark:bg-red-900 dark:text-red-300">Erro</span>;
            default:
                return <span className="px-2 py-1 text-xs font-medium text-gray-800 bg-gray-100 rounded-full dark:bg-gray-700 dark:text-gray-300">{status}</span>;
        }
    };

  return (
    <>
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
        accept=".pdf"
        multiple
      />
      <div className="grid auto-rows-max items-start gap-4 md:gap-8 lg:col-span-2">
        <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-2 xl:grid-cols-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Finalizados</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">2</div>
              <p className="text-xs text-muted-foreground">Arquivos processados com sucesso</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Pendentes</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1</div>
              <p className="text-xs text-muted-foreground">Aguardando na fila de processamento</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Erros</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1</div>
              <p className="text-xs text-muted-foreground">Falhas durante o processamento</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">4</div>
              <p className="text-xs text-muted-foreground">Total de arquivos importados</p>
            </CardContent>
          </Card>
        </div>
        <Tabs defaultValue="all">
          <div className="flex items-center">
            <TabsList>
              <TabsTrigger value="all">Todos</TabsTrigger>
              <TabsTrigger value="finalizado">Finalizados</TabsTrigger>
              <TabsTrigger value="pendente">Pendentes</TabsTrigger>
              <TabsTrigger value="erro">Com Erro</TabsTrigger>
            </TabsList>
            <div className="ml-auto flex items-center gap-2">
              <Button size="sm" variant="outline" className="h-7 gap-1" onClick={() => toast.info('Função para baixar todos os arquivos em um ZIP.')}>
                <Archive className="h-3.5 w-3.5" />
                <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
                  Baixar ZIP
                </span>
              </Button>
              <Button size="sm" className="h-7 gap-1" onClick={handleImportClick}>
                <Upload className="h-3.5 w-3.5" />
                <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
                  Importar PDF
                </span>
              </Button>
            </div>
          </div>
          <TabsContent value="all">
            <Card>
              <CardHeader>
                <CardTitle>Arquivos Processados</CardTitle>
                <CardDescription>
                  Gerencie os arquivos de notas fiscais importados.
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isUploading && (
                    <div className="w-full my-4">
                        <Progress value={uploadProgress} className="w-full" />
                        <p className="text-sm text-center mt-2 text-muted-foreground">
                            Processando arquivos... {uploadProgress}%
                        </p>
                    </div>
                )}
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Status</TableHead>
                      <TableHead>Nome Original</TableHead>
                      <TableHead>Novo Nome</TableHead>
                      <TableHead>
                        <span className="sr-only">Ações</span>
                      </TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {files.map((file) => (
                      <TableRow key={file.id}>
                        <TableCell>
                            <StatusBadge status={file.status} />
                        </TableCell>
                        <TableCell className="font-medium">{file.originalName}</TableCell>
                        <TableCell className="text-muted-foreground">{file.newName}</TableCell>
                        <TableCell>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button
                                aria-haspopup="true"
                                size="icon"
                                variant="ghost"
                              >
                                <MoreHorizontal className="h-4 w-4" />
                                <span className="sr-only">Toggle menu</span>
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Ações</DropdownMenuLabel>
                              <DropdownMenuItem disabled={file.status !== 'Finalizado'} onClick={() => toast.success(`Baixando: ${file.newName}`)}>
                                <Download className="mr-2 h-4 w-4" />
                                Baixar
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <FileText className="mr-2 h-4 w-4" />
                                Ver Detalhes
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem className="text-red-600">
                                Excluir
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </>
  );
}
