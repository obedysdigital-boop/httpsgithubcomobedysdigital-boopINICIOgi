import { useState, useRef } from 'react';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/contexts/AuthContext';
import { createWorker } from 'tesseract.js';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Progress } from '@/components/ui/progress';
import { toast } from 'sonner';
import { Upload, Archive, FileText, Download, MoreHorizontal, Loader2 } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

type ProcessedFile = {
    id: string;
    originalName: string;
    newName: string;
    status: 'Processando' | 'Finalizado' | 'Erro';
    progress: number;
    data?: any;
}

export function RenomeadorPage() {
    const [processedFiles, setProcessedFiles] = useState<ProcessedFile[]>([]);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const { user } = useAuth();

    const handleImportClick = () => {
        fileInputRef.current?.click();
    };

    const processFile = async (file: File) => {
        const fileId = `${file.name}-${Date.now()}`;
        
        setProcessedFiles(prev => [...prev, { id: fileId, originalName: file.name, newName: 'Aguardando...', status: 'Processando', progress: 0 }]);

        try {
            const worker = await createWorker('por', 1, {
                logger: m => {
                    if (m.status === 'recognizing text') {
                        const progress = Math.round(m.progress * 100);
                        setProcessedFiles(prev => prev.map(f => f.id === fileId ? { ...f, progress } : f));
                    }
                },
            });

            const { data: { text } } = await worker.recognize(file);
            await worker.terminate();

            // Simple data extraction logic (can be improved)
            const cnpjMatch = text.match(/(\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2})/);
            const numeroNotaMatch = text.match(/(?:N[Ff][-Ee]?|N[Uu][Mm][Ee][Rr][Oo])\s*N?[ºo°]?\.?\s*(\d{1,3}(?:\.\d{3})*(?:-\d{1,2})?|\d{6,9})/);
            const valorTotalMatch = text.match(/(?:VALOR TOTAL DA NOTA|VALOR TOTAL DOS SERVIÇOS)\s*([\d,.]+)/);
            
            const dataEmissaoMatch = text.match(/(\d{2}\/\d{2}\/\d{4})/);
            const nomeEmitenteMatch = text.match(/^([A-ZÀ-Ú ]+)\n/m); // Very basic

            const extractedData = {
                cnpj: cnpjMatch ? cnpjMatch[1] : null,
                numero_nota: numeroNotaMatch ? numeroNotaMatch[1].replace(/\./g, '') : 'N/A',
                valor_total: valorTotalMatch ? parseFloat(valorTotalMatch[1].replace('.', '').replace(',', '.')) : null,
                data_emissao: dataEmissaoMatch ? dataEmissaoMatch[1].split('/').reverse().join('-') : null,
                nome_emitente: nomeEmitenteMatch ? nomeEmitenteMatch[1].trim() : 'Emitente Desconhecido',
                tipo: text.includes('DANFE') ? 'DANFE' : text.includes('NOTA FISCAL DE SERVIÇOS') ? 'Serviço' : 'Desconhecido',
            };

            const newName = `${extractedData.nome_emitente} - NF ${extractedData.numero_nota} - R$ ${extractedData.valor_total?.toFixed(2)}.pdf`;

            if (user) {
                const { error } = await supabase.from('notas_fiscais').insert({
                    ...extractedData,
                    user_id: user.id,
                    arquivo_nome_original: file.name,
                    arquivo_nome_novo: newName,
                });

                if (error) throw new Error(error.message);
            }

            setProcessedFiles(prev => prev.map(f => f.id === fileId ? { ...f, status: 'Finalizado', newName, progress: 100, data: extractedData } : f));
            toast.success(`Arquivo "${file.name}" processado e salvo.`);

        } catch (error) {
            console.error(error);
            setProcessedFiles(prev => prev.map(f => f.id === fileId ? { ...f, status: 'Erro', newName: 'Falha no processamento', progress: 100 } : f));
            toast.error(`Falha ao processar o arquivo "${file.name}".`);
        }
    };

    const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFiles = event.target.files;
        if (!selectedFiles || selectedFiles.length === 0) return;

        toast.info(`${selectedFiles.length} arquivo(s) na fila de processamento.`);
        for (const file of Array.from(selectedFiles)) {
            await processFile(file);
        }
    };

    const StatusBadge = ({ status }: { status: ProcessedFile['status'] }) => {
        switch (status) {
            case 'Finalizado':
                return <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300">Finalizado</Badge>;
            case 'Processando':
                return <Badge variant="secondary" className="bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300">Processando</Badge>;
            case 'Erro':
                return <Badge variant="destructive">Erro</Badge>;
            default:
                return <Badge variant="outline">{status}</Badge>;
        }
    };

  return (
    <>
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
        accept=".pdf"
        multiple
      />
      <div className="grid auto-rows-max items-start gap-4 md:gap-8 lg:col-span-2">
        <Card>
          <CardHeader className="pb-4">
            <CardTitle>Renomeador de Notas Fiscais</CardTitle>
            <CardDescription>
              Importe seus arquivos PDF para extrair os dados, renomear e registrar automaticamente.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button size="lg" className="h-12 gap-2" onClick={handleImportClick}>
              <Upload className="h-5 w-5" />
              <span className="text-base">Importar PDF(s)</span>
            </Button>
          </CardContent>
        </Card>
        
        {processedFiles.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>Fila de Processamento</CardTitle>
                <CardDescription>
                  Acompanhe o status dos arquivos importados.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[120px]">Status</TableHead>
                      <TableHead>Nome Original</TableHead>
                      <TableHead>Progresso</TableHead>
                      <TableHead>Novo Nome / Resultado</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {processedFiles.map((file) => (
                      <TableRow key={file.id}>
                        <TableCell>
                            <StatusBadge status={file.status} />
                        </TableCell>
                        <TableCell className="font-medium">{file.originalName}</TableCell>
                        <TableCell>
                            <Progress value={file.progress} className="w-full h-2" />
                        </TableCell>
                        <TableCell className="text-muted-foreground">{file.newName}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
        )}

      </div>
    </>
  );
}
