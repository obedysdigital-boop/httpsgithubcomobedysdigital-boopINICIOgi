import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/contexts/AuthContext';
import { Database } from '@/types/database';

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from "@/components/ui/popover"
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Calendar } from "@/components/ui/calendar"
import {
  MoreHorizontal,
  FileText,
  MessageSquareQuote,
  Trash2,
  Share2,
  Pencil,
  Calendar as CalendarIcon,
  Download,
  Loader2,
} from 'lucide-react';
import { toast } from 'sonner';
import { format } from "date-fns"
import { ptBR } from "date-fns/locale"
import { cn } from "@/lib/utils"

type NotaFiscal = Database['public']['Tables']['notas_fiscais']['Row'] & {
    profiles: { email: string } | null;
};

export function RelatoriosPage() {
    const [registros, setRegistros] = useState<NotaFiscal[]>([]);
    const [loading, setLoading] = useState(true);
    const [editingRecord, setEditingRecord] = useState<NotaFiscal | null>(null);
    const [commentingRecord, setCommentingRecord] = useState<NotaFiscal | null>(null);
    const [date, setDate] = useState<Date | undefined>();

    const fetchNotas = async () => {
        setLoading(true);
        const { data, error } = await supabase
            .from('notas_fiscais')
            .select(`
                *,
                profiles ( email )
            `)
            .order('created_at', { ascending: false });
        
        if (error) {
            toast.error("Falha ao carregar relat√≥rios: " + error.message);
        } else {
            setRegistros(data as NotaFiscal[]);
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchNotas();
    }, []);

    const handleShare = (registro: NotaFiscal) => {
        const message = `üßæ *Resumo da Nota Fiscal* üßæ%0A%0A*Tipo:* ${registro.tipo}%0A*Emitente:* ${registro.nome_emitente}%0A*N¬∫ Nota:* ${registro.numero_nota}%0A*Valor:* ${registro.valor_total?.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}%0A*Vencimento:* ${registro.vencimento ? format(new Date(registro.vencimento), 'dd/MM/yyyy') : 'N/A'}%0A%0A*Registrado por:* ${registro.profiles?.email} em ${format(new Date(registro.created_at), 'dd/MM/yyyy HH:mm')}`;
        const whatsappUrl = `https://api.whatsapp.com/send?text=${message}`;
        window.open(whatsappUrl, '_blank');
        toast.success('Resumo pronto para ser compartilhado no WhatsApp!');
    };

    const handleSaveComment = async (id: number, comentario: string) => {
        const { error } = await supabase.from('notas_fiscais').update({ comentario }).eq('id', id);
        if (error) {
            toast.error("Falha ao salvar coment√°rio.");
        } else {
            fetchNotas(); // Refetch data
            setCommentingRecord(null);
            toast.success('Coment√°rio salvo com sucesso!');
        }
    }
    
    const handleSaveEdit = async (registro: NotaFiscal) => {
        const { error } = await supabase.from('notas_fiscais').update({ nome_emitente: registro.nome_emitente, valor_total: registro.valor_total }).eq('id', registro.id);
        if (error) {
            toast.error("Falha ao atualizar registro.");
        } else {
            fetchNotas(); // Refetch data
            setEditingRecord(null);
            toast.success('Registro atualizado com sucesso!');
        }
    }
    
    const handleDelete = async (id: number) => {
        const { error } = await supabase.from('notas_fiscais').delete().eq('id', id);
        if (error) {
            toast.error("Falha ao excluir registro.");
        } else {
            setRegistros(prev => prev.filter(r => r.id !== id));
            toast.success('Registro exclu√≠do com sucesso!');
        }
    }

    if (loading) {
        return <div className="flex items-center justify-center h-64"><Loader2 className="h-8 w-8 animate-spin" /></div>
    }

    return (
        <div className="flex-1 space-y-4">
            <div className="flex items-center justify-between space-y-2">
                <h2 className="text-3xl font-bold tracking-tight">Relat√≥rios</h2>
                <div className="flex items-center space-x-2">
                    <Button variant="outline" onClick={() => toast.info('Fun√ß√£o de relat√≥rio em PDF em desenvolvimento.')}>
                        <FileText className="mr-2 h-4 w-4" /> PDF
                    </Button>
                    <Button variant="outline" onClick={() => toast.info('Fun√ß√£o de relat√≥rio em XLS em desenvolvimento.')}>
                        <Download className="mr-2 h-4 w-4" /> XLS
                    </Button>
                </div>
            </div>

            <div className="p-6 border rounded-lg bg-card">
                <div className="flex items-center space-x-4 mb-6">
                    <Input placeholder="Buscar por nome ou CNPJ..." className="max-w-xs" />
                     <Popover>
                        <PopoverTrigger asChild>
                        <Button
                            variant={"outline"}
                            className={cn("w-[240px] justify-start text-left font-normal", !date && "text-muted-foreground")}
                        >
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {date ? format(date, "PPP", { locale: ptBR }) : <span>Selecione a data</span>}
                        </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                        <Calendar mode="single" selected={date} onSelect={setDate} initialFocus />
                        </PopoverContent>
                    </Popover>
                    <Select>
                        <SelectTrigger className="w-[180px]"><SelectValue placeholder="Tipo de Nota" /></SelectTrigger>
                        <SelectContent>
                            <SelectItem value="danfe">DANFE</SelectItem>
                            <SelectItem value="servico">Servi√ßo</SelectItem>
                        </SelectContent>
                    </Select>
                     <Button onClick={() => toast.info('Fun√ß√£o de filtro em desenvolvimento.')}>Filtrar</Button>
                </div>

                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Tipo</TableHead>
                            <TableHead>Nome/Emitente</TableHead>
                            <TableHead>N¬∫ Nota</TableHead>
                            <TableHead>Valor</TableHead>
                            <TableHead>Vencimento</TableHead>
                            <TableHead>Usu√°rio</TableHead>
                            <TableHead><span className="sr-only">A√ß√µes</span></TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {registros.map((registro) => (
                            <TableRow key={registro.id}>
                                <TableCell>{registro.tipo}</TableCell>
                                <TableCell className="font-medium">{registro.nome_emitente}</TableCell>
                                <TableCell>{registro.numero_nota}</TableCell>
                                <TableCell>{registro.valor_total?.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</TableCell>
                                <TableCell>{registro.vencimento ? format(new Date(registro.vencimento), 'dd/MM/yyyy') : 'N/A'}</TableCell>
                                <TableCell>{registro.profiles?.email}</TableCell>
                                <TableCell>
                                    <DropdownMenu>
                                        <DropdownMenuTrigger asChild><Button variant="ghost" className="h-8 w-8 p-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
                                        <DropdownMenuContent align="end">
                                            <DropdownMenuLabel>A√ß√µes</DropdownMenuLabel>
                                            <DropdownMenuItem onClick={() => setEditingRecord(registro)}><Pencil className="mr-2 h-4 w-4" /> Editar</DropdownMenuItem>
                                            <DropdownMenuItem onClick={() => setCommentingRecord(registro)}><MessageSquareQuote className="mr-2 h-4 w-4" /> Comentar</DropdownMenuItem>
                                            <DropdownMenuItem onClick={() => handleShare(registro)}><Share2 className="mr-2 h-4 w-4" /> Compartilhar</DropdownMenuItem>
                                            <DropdownMenuSeparator />
                                            <DropdownMenuItem className="text-red-500" onClick={() => handleDelete(registro.id)}><Trash2 className="mr-2 h-4 w-4" /> Excluir</DropdownMenuItem>
                                        </DropdownMenuContent>
                                    </DropdownMenu>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </div>

            <Dialog open={!!editingRecord} onOpenChange={(open) => !open && setEditingRecord(null)}>
                <DialogContent className="sm:max-w-[425px]">
                    <DialogHeader><DialogTitle>Editar Registro</DialogTitle></DialogHeader>
                    {editingRecord && (
                        <form onSubmit={(e) => { e.preventDefault(); handleSaveEdit(editingRecord); }}>
                            <div className="grid gap-4 py-4">
                                <Label htmlFor="nome">Nome</Label>
                                <Input id="nome" value={editingRecord.nome_emitente || ''} onChange={(e) => setEditingRecord({...editingRecord, nome_emitente: e.target.value})} />
                                <Label htmlFor="valor">Valor</Label>
                                <Input id="valor" type="number" value={editingRecord.valor_total || ''} onChange={(e) => setEditingRecord({...editingRecord, valor_total: parseFloat(e.target.value)})} />
                            </div>
                            <DialogFooter>
                                <DialogClose asChild><Button variant="outline">Cancelar</Button></DialogClose>
                                <Button type="submit">Salvar Altera√ß√µes</Button>
                            </DialogFooter>
                        </form>
                    )}
                </DialogContent>
            </Dialog>

            <Dialog open={!!commentingRecord} onOpenChange={(open) => !open && setCommentingRecord(null)}>
                <DialogContent className="sm:max-w-[425px]">
                    <DialogHeader><DialogTitle>Adicionar Coment√°rio</DialogTitle></DialogHeader>
                    {commentingRecord && (
                        <form onSubmit={(e) => { e.preventDefault(); handleSaveComment(commentingRecord.id, (document.getElementById('comentario') as HTMLTextAreaElement).value); }}>
                            <div className="grid gap-4 py-4">
                                <Textarea id="comentario" placeholder="Digite seu coment√°rio..." defaultValue={commentingRecord.comentario || ''} />
                            </div>
                            <DialogFooter>
                                <DialogClose asChild><Button variant="outline">Cancelar</Button></DialogClose>
                                <Button type="submit">Salvar Coment√°rio</Button>
                            </DialogFooter>
                        </form>
                    )}
                </DialogContent>
            </Dialog>
        </div>
    );
}
