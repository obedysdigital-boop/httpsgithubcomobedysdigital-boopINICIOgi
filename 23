import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { Database } from '@/types/database';
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
    CardFooter
} from "@/components/ui/card";
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { Loader2 } from 'lucide-react';

type Profile = Database['public']['Tables']['profiles']['Row'];

export function PerfilPage() {
    const [users, setUsers] = useState<Profile[]>([]);
    const [loading, setLoading] = useState(true);

    const fetchUsers = async () => {
        setLoading(true);
        const { data, error } = await supabase
            .from('profiles')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (error) {
            toast.error("Falha ao carregar usuários: " + error.message);
        } else {
            setUsers(data);
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchUsers();
    }, []);

    const handleApproval = async (userId: string, isApproved: boolean) => {
        const { error } = await supabase
            .from('profiles')
            .update({ is_approved: isApproved })
            .eq('id', userId);
        
        if (error) {
            toast.error(`Falha ao ${isApproved ? 'aprovar' : 'rejeitar'} usuário.`);
        } else {
            toast.success(`Usuário ${isApproved ? 'aprovado' : 'rejeitado'}!`);
            setUsers(prev => prev.map(u => u.id === userId ? { ...u, is_approved: isApproved } : u));
        }
    }

    return (
        <div className="grid gap-6">
            <Card>
                <CardHeader>
                    <CardTitle>Gerenciamento de Usuários</CardTitle>
                    <CardDescription>Aprove ou rejeite o acesso de novos usuários ao sistema.</CardDescription>
                </CardHeader>
                <CardContent>
                    {loading ? (
                        <div className="flex items-center justify-center h-40"><Loader2 className="h-8 w-8 animate-spin" /></div>
                    ) : (
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Email</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead className="text-right">Ações</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {users.map(user => (
                                    <TableRow key={user.id}>
                                        <TableCell className="font-medium">{user.email}</TableCell>
                                        <TableCell>
                                            {user.is_admin ? (
                                                <Badge>Admin</Badge>
                                            ) : (
                                                <Badge variant={user.is_approved ? 'default' : 'destructive'}>
                                                    {user.is_approved ? 'Aprovado' : 'Pendente'}
                                                </Badge>
                                            )}
                                        </TableCell>
                                        <TableCell className="text-right">
                                            {!user.is_admin && (
                                                <div className="flex gap-2 justify-end">
                                                    {user.is_approved ? (
                                                        <Button size="sm" variant="destructive" onClick={() => handleApproval(user.id, false)}>Rejeitar</Button>
                                                    ) : (
                                                        <Button size="sm" onClick={() => handleApproval(user.id, true)}>Aprovar</Button>
                                                    )}
                                                </div>
                                            )}
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    )}
                </CardContent>
            </Card>

            <Card>
                <CardHeader>
                    <CardTitle>Configurações do Perfil</CardTitle>
                    <CardDescription>Gerencie suas preferências e configurações de conta.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="flex items-center justify-between p-4 border rounded-lg">
                        <div>
                            <Label htmlFor="notifications-email">Notificações por Email</Label>
                            <p className="text-sm text-muted-foreground">Receba alertas sobre novos usuários e relatórios semanais.</p>
                        </div>
                        <Switch id="notifications-email" defaultChecked />
                    </div>
                </CardContent>
                <CardFooter className="border-t px-6 py-4">
                    <Button onClick={() => toast.info('Função em desenvolvimento.')}>Salvar Preferências</Button>
                </CardFooter>
            </Card>
        </div>
    );
}
